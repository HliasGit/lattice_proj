#include <iostream>
#include <vector>
#include <chrono>
#include <stack>
#include <sstream>

#include "parser.hpp"

struct Node {
  int depth; // depth in the tree
  std::vector<int> value;// configration for that node
  std::vector<std::vector<int>> domain;

  
  Node(size_t N, std::vector<std::vector<int>> dom): depth(0), value(N), domain(dom){
    for (int i = 0; i < N; i++) {
      value[i] = 0;
    }
  }
  Node(const Node&) = default;
  Node(Node&&) = default;
  Node() = default;
};

// Function to generate arrays based on upper bounds
std::vector<std::vector<int>> generateArrays(int* ub, size_t size) {
    std::vector<std::vector<int>> arrays(size);
    for (size_t i = 0; i < size; ++i) {
        arrays[i].resize(ub[i] + 1);
        for (int j = 0; j <= ub[i]; ++j) {
            arrays[i][j] = j;
        }
    }
    return arrays;
}

bool isSafe(const std::vector<int>& values, const int j, int **C, const int depth)
{
  for (int i = 0; i < depth; i++) {
    if (C[i][depth] == 1 && values[i] == j) {
      return false;
    }
  }
  return true;
}

// evaluate a given node (i.e., check its board configuration) and branch it if it is valid
// (i.e., generate its child nodes.)
void evaluate_and_branch(const Node& parent, std::stack<Node>& pool, size_t& tree_loc, size_t& num_sol, int **C)
{
  int depth = parent.depth;
  int N = parent.value.size();

  // if the given node is a leaf, then update counter and do nothing
  if (depth == N) {
    num_sol++;
    for (auto it = parent.value.begin(); it != parent.value.end(); ++it)
    {
      std::cout << " " << *it;
    }
    std::cout << ", " << num_sol << " sol found" << std::endl;
  }

  // if the given node is not a leaf, then update counter and evaluate/branch it
  else {
    //for (int j = 0; j <= parent.domain[parent.depth].size(); j++) {
    for(auto j = parent.domain[parent.depth].begin(); j != parent.domain[parent.depth].end(); j++){
      if (isSafe(parent.value, *j, C, parent.depth)) {
        Node child(parent);
        //std::swap(child.value[depth], child.value[j]);
        child.value[depth] = *j;
        child.depth++;
        pool.push(std::move(child));
        tree_loc++;
      }
    }
  }
}


int main(int argc, char** argv) {

    // Check if the number of arguments is correct
    if (argc != 2) {
        std::cout << "usage: " << argv[0] << " elements " << std::endl;
        exit(1);
    }


    // number of elements to treat
    size_t N = std::stoll(argv[1]);
    std::cout << "Solving " << N << " sized generic problem\n" << std::endl;

    // use data generated by the parser

    std::vector<std::vector<int>> domain;
    int **C;

    Data data;
    std::ostringstream filename;
    filename << "pco_" << N << ".txt";

    // Use the dynamically constructed filename in the data.read_input function call
    if (data.read_input(filename.str().c_str())) {
        // print the number of elements
        std::cout << "Number of elements: " << data.get_n() << std::endl;
        N = data.get_n();

        // get the upper bound
        int *ub = data.get_u();
        domain = generateArrays(ub, N);

        for (auto i = domain[0].begin(); i != domain[0].begin(); i++){
          std::cout << "jabfiuabeifk" << std::endl;
          std::cout << *i << std::endl;
        }
        // get the constraint matrix
        C = data.get_C();

    } else {
        std::cerr << "Error while reading the file" << std::endl;
        return 1;
    }

    // initialization of the root node (the board configuration where no queen is placed)
    Node root(N, domain);

    // initialization of the pool of nodes (stack -> DFS exploration order)
    std::stack<Node> pool;
    pool.push(std::move(root));

    // statistics to check correctness (number of nodes explored and number of solutions found)
    size_t exploredTree = 0;
    size_t exploredSol = 0;

    // beginning of the Depth-First tree-Search
    auto start = std::chrono::steady_clock::now();

    while (pool.size() != 0) {
        // get a node from the pool
        Node currentNode(std::move(pool.top()));
        pool.pop();

        // check the board configuration of the node and branch it if it is valid.
        evaluate_and_branch(currentNode, pool, exploredTree, exploredSol, C);
    }

    auto end = std::chrono::steady_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);

    // outputs
    std::cout << "Time taken: " << duration.count() << " milliseconds" << std::endl;
    std::cout << "Total solutions: " << exploredSol << std::endl;
    std::cout << "Size of the explored tree: " << exploredTree << std::endl;

    return 0;
}